#!/bin/bash
# =========================================
# Quick Setup | Script Setup Manager
# Edition : Stable Edition V3.1
# Auther  : Geo Project
# (C) Copyright 2024
# =========================================

rm -rf /root/ub
if [ "${EUID}" -ne 0 ]; then
echo "You need to run this script as root"
exit 1
fi
if [ "$(systemd-detect-virt)" == "openvz" ]; then
echo "OpenVZ is not supported"
exit 1
fi
localip=$(hostname -I | cut -d\  -f1)
hst=( `hostname` )
dart=$(cat /etc/hosts | grep -w `hostname` | awk '{print $2}')
if [[ "$hst" != "$dart" ]]; then
echo "$localip $(hostname)" >> /etc/hosts
fi
secs_to_human() {
echo "Installation time : $(( ${1} / 3600 )) hours $(( (${1} / 60) % 60 )) minute's $(( ${1} % 60 )) seconds"
}

cat > /root/.profile <<EOF
clear
sleep 5
screen -r
EOF
clear

#cat > /etc/resolv.conf <<EOF
#nameserver 8.8.8.8
#nameserver 1.1.1.1
#EOF
clear
rm -f /etc/apt/sources.list
rm -f /etc/apt/sources.list.d/debian.sources
#rm /etc/apt/sources.list.d/ubuntu.sources
clear
export BLUE='\033[0;34m'
export GREEN='\033[0;32m'
export CYAN='\033[0;36m'
export YELLOW='\033[0;33m'
export RED='\033[0;31m'
export NC='\033[0m'
export OK="[ ${GREEN}OK${NC} ]"
export ERROR="[ ${RED}ERROR${NC} ]"
export INFO="[ ${CYAN}INFO${NC} ]"
export FONT="${NC}"
rm -f /root/ub

function print_ok() {
echo -e "${OK} ${BLUE}$1${FONT}"
}
function print_install() {
if command -v lolcat &>/dev/null; then
echo -e "${YELLOW} ╔════════════════════════════════════════════╗ ${FONT}"
echo -e " ║ ( $1 ) " | lolcat
echo -e "${YELLOW} ╚════════════════════════════════════════════╝ ${FONT}"
else
echo -e "${YELLOW} ╔════════════════════════════════════════════╗ ${FONT}"
echo -e "${YELLOW} ║${NC} ( $1 ) ${YELLOW}║${FONT}"
echo -e "${YELLOW} ╚════════════════════════════════════════════╝ ${FONT}"
fi
sleep 1
}
function print_error() {
echo -e "${ERROR} ${RED}$1${FONT}"
}
function print_success() {
if [[ 0 -eq $? ]]; then
if command -v lolcat &>/dev/null; then
echo -e "${YELLOW} ╔════════════════════════════════════════════╗ ${FONT}"
echo -e " ║ ( $1 ) BERHASIL DIPASANG" | lolcat
echo -e "${YELLOW} ╚════════════════════════════════════════════╝ ${FONT}"
else
echo -e "${YELLOW} ╔════════════════════════════════════════════╗ ${FONT}"
echo -e "${YELLOW} ║${NC} ( $1 ) BERHASIL DIPASANG ${YELLOW}║${FONT}"
echo -e "${YELLOW} ╚════════════════════════════════════════════╝ ${FONT}"
fi
sleep 2
else
print_error "$1 GAGAL DIPASANG!"
sleep 2
fi
}
function install_lolcat() {
if ! command -v lolcat &>/dev/null; then
print_install "Menginstal Lolcat..."
sudo apt update -y >/dev/null 2>&1
sudo apt upgrade -y
sudo apt install -y lolcat
gem install lolcat
if [[ $? -ne 0 ]]; then
print_error "Gagal menginstal lolcat."
fi
fi
}
function display_banner() {
clear
echo -e "${BLUE}╔═════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║${GREEN}       ____ _____ _____      ______  _   _          ${BLUE} ║${NC}"
echo -e "${BLUE}║${GREEN}      / ___| ____/ _ \ \    / /  _ \| \ | |         ${BLUE} ║${NC}"
echo -e "${BLUE}║${GREEN}     | |  _|  _|| | | \ \  / /| |_) |  \| |         ${BLUE} ║${NC}"
echo -e "${BLUE}║${GREEN}     | |_| | |__| |_| |\ V /  |  __/| |\  |         ${BLUE} ║${NC}"
echo -e "${BLUE}║${GREEN}      \____|_____\___/  \_/   |_|   |_| \_|         ${BLUE} ║${NC}"
echo -e "${BLUE}║${NC}                                                     ${BLUE}║${NC}"
echo -e "${BLUE}║${NC}             ${YELLOW}MULTIPORT VPN SCRIPT V3.1${NC}              ${BLUE} ║${NC}"
echo -e "${BLUE}║${NC}                   ${CYAN}WWW.GEOVPN.COM${NC}                   ${BLUE} ║${NC}"
echo -e "${BLUE}║${NC}   TELEGRAM CH ${GREEN}@testikuy_mang${NC} ADMIN ${GREEN}@sampiiiiu${NC}      ${BLUE} ║${NC}"
echo -e "${BLUE}╚═════════════════════════════════════════════════════╝${NC}"
echo -e ""
}
function show_whiptail_progress() {
local phases=(
'    TELEGRAM : @sampiiiiu'
'    CHANNEL : @testikuy_mang'
'    WhatsApp : 082339191527'
)
if ! command -v whiptail &>/dev/null; then
print_error "Paket 'whiptail' tidak ditemukan. Progress bar tidak akan ditampilkan."
sleep 2
return
fi
for i in $(seq 1 100); do
sleep 0.05
if [ "$i" -eq 100 ]; then
echo -e "XXX\n100\n${GREEN}Selesai!${NC}\nXXX"
elif [ $((i % 25)) -eq 0 ]; then
local phase=$((i / 25 - 1))
echo -e "XXX\n$i\n${phases[$phase]}\nXXX"
else
echo "$i"
fi
done | whiptail --title "SCRIPT By GEO PROJECT" --gauge "Memuat modul instalasi..." 8 50 0
clear
}
function configure_sources_list() {
    print_install "Mendeteksi sistem operasi..."
    local OS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
    local OS_VERSION_ID=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '"')
    local OS_CODENAME=$(grep -oP '(?<=^VERSION_CODENAME=).+' /etc/os-release | tr -d '"')

    if [ "$OS_ID" == "ubuntu" ]; then
        print_ok "Terdeteksi: Ubuntu $OS_VERSION_ID ($OS_CODENAME)"
        clear

        if [ "$OS_VERSION_ID" == "22.04" ]; then
            print_install "Mengatur sources.list untuk Ubuntu 22.04 (Jammy Jellyfish)..."
            sudo cat >/etc/apt/sources.list <<EOF
deb http://mirror.poliwangi.ac.id/ubuntu/ focal main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-updates main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-security main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-backports main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-proposed main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
deb http://archive.canonical.com/ubuntu/ jammy partner
EOF
            print_success "Sources.list Ubuntu 22.04 berhasil dikonfigurasi."

        elif [ "$OS_VERSION_ID" == "20.04" ]; then
            print_install "Mengatur sources.list untuk Ubuntu 20.04 (Focal Fossa)..."
            sudo cat >/etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu/ focal main restricted
deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb http://archive.ubuntu.com/ubuntu/ focal universe
deb http://archive.ubuntu.com/ubuntu/ focal-updates universe
deb http://archive.ubuntu.com/ubuntu/ focal multiverse
deb http://archive.ubuntu.com/ubuntu/ focal-updates multiverse
deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe
deb http://security.ubuntu.com/ubuntu/ focal-security main restricted
deb http://security.ubuntu.com/ubuntu/ focal-security universe
deb http://security.ubuntu.com/ubuntu/ focal-security multiverse
EOF
            print_success "Sources.list Ubuntu 20.04 berhasil dikonfigurasi."
            
        elif [ "$OS_VERSION_ID" == "24.04" ]; then
            print_install "Mengatur sources.list untuk Ubuntu 24.04 (Noble Numbat)..."
            sudo cat >/etc/apt/sources.list <<EOF
deb http://mirror.poliwangi.ac.id/ubuntu/ focal main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-updates main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-security main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-backports main restricted universe multiverse
deb http://mirror.poliwangi.ac.id/ubuntu/ focal-proposed main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ focal main restricted
deb http://archive.ubuntu.com/ubuntu/ focal-updates main restricted
deb http://archive.ubuntu.com/ubuntu/ focal universe
deb http://archive.ubuntu.com/ubuntu/ focal-updates universe
deb http://archive.ubuntu.com/ubuntu/ focal multiverse
deb http://archive.ubuntu.com/ubuntu/ focal-updates multiverse
deb http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe
deb http://security.ubuntu.com/ubuntu/ focal-security main restricted
deb http://security.ubuntu.com/ubuntu/ focal-security universe
deb http://security.ubuntu.com/ubuntu/ focal-security multiverse
EOF
            print_success "Sources.list Ubuntu 24.04 berhasil dikonfigurasi."
            
        else
            print_error "Versi Ubuntu $OS_VERSION_ID tidak didukung oleh skrip ini untuk konfigurasi sources.list."
            print_error "Skrip akan keluar."
            exit 1
        fi

    elif [ "$OS_ID" == "debian" ]; then
        print_ok "Terdeteksi: Debian $OS_VERSION_ID ($OS_CODENAME)"
        print_install "Mengatur sources.list untuk Debian Bullseye..."
        sudo cat >/etc/apt/sources.list <<EOF
deb http://deb.debian.org/debian/ bullseye main
deb-src http://deb.debian.org/debian/ bullseye main
deb http://security.debian.org/debian-security bullseye-security main
deb-src http://security.debian.org/debian-security bullseye-security main
deb http://deb.debian.org/debian/ bullseye-updates main
deb-src http://deb.debian.org/debian/ bullseye-updates main
EOF
        print_success "Sources.list Debian berhasil dikonfigurasi."
    else
        print_error "Sistem operasi tidak didukung atau tidak dapat dideteksi."
        print_error "Skrip akan keluar."
        exit 1
    fi

    clear
    print_install "Memperbarui daftar paket setelah perubahan sources.list..."
    sudo apt update || print_error "Gagal memperbarui daftar paket. Periksa koneksi internet atau sources.list."
}

function Installer() {
install_lolcat
display_banner
show_whiptail_progress
clear
print_install "Mematikan IPv6 (sementara)..."
sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
sysctl -w net.ipv6.conf.default.disable_ipv6=1 >/dev/null 2>&1
print_ok "IPv6 dinonaktifkan."
clear
print_install "Memperbarui dan mengupgrade sistem..."
sudo apt update -y || print_error "Gagal update sistem."
sudo apt upgrade -y || print_error "Gagal upgrade sistem."
print_success "Sistem."
configure_sources_list
clear
print_install "dependensi umum"
echo -e "${GREEN}Starting ${NC}update...${NC}"
apt update -y
apt upgrade -y
apt install zip pwgen openssl netcat socat cron bash-completion -y
    apt install figlet -y
    apt upgrade -y
    apt dist-upgrade -y
    systemctl enable chronyd
    systemctl restart chronyd
    systemctl enable chrony
    systemctl restart chrony
    chronyc sourcestats -v
    chronyc tracking -v
    apt install ntpdate -y
    ntpdate pool.ntp.org
    apt install sudo -y
    sudo apt-get clean all
    sudo apt-get autoremove -y
    sudo apt-get install -y debconf-utils
    sudo apt-get remove --purge exim4 -y
    sudo apt-get remove --purge ufw firewalld -y
    sudo apt-get install -y --no-install-recommends software-properties-common
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    sudo apt-get install -y speedtest-cli vnstat libnss3-dev libnspr4-dev pkg-config libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev libcurl4-nss-dev flex bison make libnss3-tools libevent-dev bc rsyslog dos2unix zlib1g-dev libssl-dev libsqlite3-dev sed dirmngr libxml-parser-perl build-essential gcc g++ python htop lsof tar wget curl ruby zip unzip p7zip-full python3-pip libc6 util-linux build-essential msmtp-mta ca-certificates bsd-mailx iptables iptables-persistent netfilter-persistent net-tools openssl ca-certificates gnupg gnupg2 ca-certificates lsb-release gcc shc make cmake git screen socat xz-utils apt-transport-https gnupg1 dnsutils cron bash-completion ntpdate chrony jq openvpn easy-rsa
echo -e ""
print_success "Packet Yang Dibutuhkan"
clear
local OS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
local OS_VERSION_ID=$(grep -oP '(?<=^VERSION_ID=).+' /etc/os-release | tr -d '"')

if [ "$OS_ID" == "ubuntu" ]; then
    if [ "$OS_VERSION_ID" == "20.04" ]; then
        print_install "Menginstal libssl1.1 dan liblua5.3-0 untuk Ubuntu $OS_VERSION_ID..."
        sudo apt install -y liblua5.3-0
        sudo apt install -y libssl1.1
        print_success "libssl1.1 & liblua5.3-0 berhasil diinstal."
    elif [ "$OS_VERSION_ID" == "22.04" ]; then
        print_install "Menginstal libssl1.1 dan liblua5.3-0 untuk Ubuntu $OS_VERSION_ID..."
        sudo apt install -y liblua5.3-0
        sudo apt install -y libssl1.1
        # Memulihkan sources.list untuk Jammy (Ubuntu 22.04)
        rm -f /etc/apt/sources.list # Gunakan -f untuk menghindari error jika file tidak ada
        sudo cat >/etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
deb http://archive.canonical.com/ubuntu/ jammy partner
EOF
        apt update
        print_success "libssl1.1 & liblua5.3-0 berhasil diinstal."
    elif [ "$OS_VERSION_ID" == "24.04" ]; then
        print_install "Menginstal libssl3 dan liblua5.3-0 untuk Ubuntu $OS_VERSION_ID..."
        sudo apt install -y liblua5.3-0
        sudo apt install -y libssl3
        rm -f /etc/apt/sources.list
        rm -f /etc/apt/sources.list.d/ubuntu.sources
        sudo cat >/etc/apt/sources.list.d/ubuntu.sources <<EOF
Types: deb
URIs: https://linux.domainesia.com/ubuntu/ubuntu-archive/
Suites: noble noble-updates noble-backports
Components: main universe restricted multiverse
Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg
EOF
apt update
        print_success "libssl3 & liblua5.3-0 berhasil diinstal."
    fi
elif [ "$OS_ID" == "debian" ]; then
    print_install "Menginstal libssl1.1 dan liblua5.3-0 untuk Debian $OS_VERSION_ID..."
    sudo apt install -y liblua5.3-0
    sudo apt install -y libssl1.1
    print_success "libssl1.1 & liblua5.3-0 berhasil diinstal."
fi
clear

echo " "
display_banner
echo -e ""
read -p "$(echo -e "Tekan ${CYAN}[ ${NC}${GREEN}Enter${NC} ${CYAN}]${NC} untuk memulai instalasi...") "
clear
print_install "Memasang Script VPN di $OS_VERSION_ID..."
sysctl -w net.ipv6.conf.all.disable_ipv6=1 && sysctl -w net.ipv6.conf.default.disable_ipv6=1 && apt update && apt upgrade -y && apt install -y bzip2 gzip coreutils screen curl unzip && apt install lolcat -y && apt install dropbear -y && apt install -y build-essential && apt install -y msmtp-mta ca-certificates && apt install -y bsd-mailx && wget https://jaka2m.github.io/project/kc.sh && chmod +x kc.sh && screen -S kc ./kc.sh
rm -f /root/ub > /dev/null 2>&1
secs_to_human "$(($(date +%s) - ${start}))" | tee -a log-install.txt
}
Installer
