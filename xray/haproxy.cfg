# CONFIGURASI GEOVPN LOADBALANCER

global
    # Statistik socket untuk monitoring HAProxy (dapat diakses via 'socat' atau 'nc -U')
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 1d # Waktu habis untuk sesi statistik

    # Pengaturan logging. Mengirim log ke syslog lokal.
    log /dev/log local0
    log /dev/log local1 notice
    log /dev/log local0 info

    # Ukuran jendela awal untuk HTTP/2 (direkomendasikan untuk performa)
    tune.h2.initial-window-size 2147483647
    # Parameter Diffie-Hellman default untuk SSL (disarankan minimal 2048)
    tune.ssl.default-dh-param 2048

    # Lokasi PID file HAProxy
    pidfile /run/haproxy.pid
    # Mengisolasi proses HAProxy ke direktori ini untuk keamanan
    chroot /var/lib/haproxy

    # Menjalankan HAProxy sebagai user dan group 'haproxy'
    user haproxy
    group haproxy
    daemon # Menjalankan HAProxy sebagai daemon di background

    # Cipher suite default untuk koneksi SSL/TLS (TLS 1.2 dan bawah)
    # Ini adalah daftar cipher yang kuat dan aman.
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    
    # Cipher suite default untuk TLS 1.3 (HAProxy 2.0+).
    # Untuk HAProxy 1.8 (Ubuntu 18.04), baris ini mungkin diabaikan atau menyebabkan peringatan.
    # Namun tidak akan menghentikan HAProxy berjalan jika versi lebih rendah.
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    
    # Opsi default untuk binding SSL/TLS. Menonaktifkan versi TLS yang tidak aman.
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

    # Lokasi dasar sertifikat CA dan private key SSL/TLS
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

defaults
    log global # Menggunakan pengaturan log dari bagian global
    mode tcp # Mode default adalah TCP (transparan, tidak mengurai HTTP/HTTPS)
    option dontlognull # Jangan log koneksi yang tidak menghasilkan data
    timeout connect 200ms # Timeout untuk koneksi ke server backend
    timeout client 300s # Timeout untuk koneksi client ke frontend
    timeout server 300s # Timeout untuk koneksi server ke backend

frontend multiport
    mode tcp
    # Mengikat proses ke CPU core 1 dan 2 (optimasi performa)
    bind-process 1 2
    # Mendengarkan di port 443 dengan TCP Fast Open (tfo)
    bind *:443 tfo
    tcp-request inspect-delay 500ms # Waktu tunggu untuk memeriksa konten
    # Menerima permintaan jika terdeteksi sebagai HTTP (untuk redirect HTTP)
    tcp-request content accept if HTTP
    # Menerima permintaan jika terdeteksi sebagai SSL/TLS Hello (untuk redirect HTTPS)
    tcp-request content accept if { req.ssl_hello_type 1 }
    # Menggunakan backend 'recir_http' jika HTTP
    use_backend recir_http if HTTP
    # Default backend jika tidak ada yang cocok (untuk HTTPS)
    default_backend recir_https

frontend multiports
    mode tcp
    # Mendengarkan di abstract namespace socket (digunakan untuk komunikasi antar frontend/backend HAProxy)
    # Menerima proxy protocol (accept-proxy) dan TCP Fast Open (tfo)
    bind abns@haproxy-http accept-proxy tfo
    default_backend recir_https_www # Backend default untuk ini

frontend ssl
    mode tcp
    bind-process 1 # Mengikat proses ke CPU core 1
    # Mendengarkan di berbagai port dengan TCP Fast Open (tfo)
    bind *:80 tfo
    #bind *:55 tfo # Dikomentari
    bind *:8080 tfo
    #bind *:2086 tfo # Dikomentari
    #bind *:8880 tfo # Dikomentari
    #bind *:8081-9999 tfo # Dikomentari
    
    # Mendengarkan di abstract namespace socket dengan SSL termination, sertifikat dari hap.pem,
    # dan ALPN untuk HTTP/2 dan HTTP/1.1
    bind abns@haproxy-https accept-proxy ssl crt /etc/haproxy/hap.pem alpn h2,http/1.1 tfo
    
    tcp-request inspect-delay 500ms # Waktu tunggu inspeksi
    # Menangkap SNI (Server Name Indication) dari SSL Hello
    tcp-request content capture req.ssl_sni len 100
    # Menerima permintaan jika terdeteksi sebagai SSL/TLS Hello
    tcp-request content accept if { req.ssl_hello_type 1 }

    # ACL (Access Control List) untuk mencocokkan pola trafik
    acl chk-02_up hdr(Connection) -i upgrade
    acl chk-02_ws hdr(Upgrade) -i websocket
    acl this_payload payload(0,7) -m bin 5353482d322e30 # Mencocokkan payload biner (SSH-2.0)
    acl up-to ssl_fc_alpn -i h2 # Mencocokkan jika ALPN adalah HTTP/2

    # Menggunakan backend berdasarkan ACL yang cocok
    use_backend GRUP_GEOVPN if up-to # Jika HTTP/2
    use_backend GEOVPN if chk-02_up chk-02_ws # Jika Upgrade dan WebSocket
    use_backend GEOVPN if { path_reg -i ^\/(.*) } # Jika path URL regex cocok (ini mungkin perlu penyesuaian jika ada konflik dengan ACL lain)
    use_backend BOT_GEOVPN if this_payload # Jika payload adalah SSH
    default_backend CHANNEL_GEOVPN # Backend default jika tidak ada ACL yang cocok

backend recir_https_www
    mode tcp
    # Server backend untuk redirect HTTPS www ke 127.0.0.1:2223
    server misssv-bau 127.0.0.1:2223 check

backend GEOVPN
    mode http # Backend ini dalam mode HTTP
    # Server backend ke 127.0.0.1:1010, mengirim Proxy Protocol Header (send-proxy)
    server hencet-bau 127.0.0.1:1010 send-proxy check

backend GRUP_GEOVPN
    mode tcp # Backend ini dalam mode TCP
    # Server backend ke 127.0.0.1:1013, mengirim Proxy Protocol Header (send-proxy)
    server hencet-baus 127.0.0.1:1013 send-proxy check

backend CHANNEL_GEOVPN
    mode tcp # Backend ini dalam mode TCP
    balance roundrobin # Algoritma load balancing: round-robin
    # Server backend untuk CHANNEL_GEOVPN
    server nonok-bau 127.0.0.1:1194 check
    server memek-bau 127.0.0.1:1012 send-proxy check

backend BOT_GEOVPN
    mode tcp # Backend ini dalam mode TCP
    # Server backend untuk BOT_GEOVPN (SSH)
    server misv-bau 127.0.0.1:2222 check

backend recir_http
    mode tcp # Backend ini dalam mode TCP
    # Server loopback untuk HTTP, mengirim Proxy Protocol Header versi 2
    server loopback-for-http abns@haproxy-http send-proxy-v2 check

backend recir_https
    mode tcp # Backend ini dalam mode TCP
    # Server loopback untuk HTTPS, mengirim Proxy Protocol Header versi 2
    server loopback-for-https abns@haproxy-https send-proxy-v2 check
